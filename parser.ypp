%{

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include "monDessin.h"
#include <QtGui>
#include <QApplication>

#include "rectangle.h"
#include "cercle.h"
#include "ligne.h"


#define YYERROR_VERBOSE
#define USE(VALUE) /*empty*/


extern "C" int yyparse (void);
extern "C" int yylex(void);
extern "C" void yyerror(const std::string&);
extern FILE* yyin;

QPointer<monDessin> D;
%}

%union{
    char * texte;
    int valeur_entiere;
}

%token<valeur_entiere> ENTIER
%token<texte> CERCLE
%token<texte> RECTANGLE
%token<texte> LIGNE

%token<texte> COLOR
%token<texte> FILLING

%token<valeur_entiere> EPAISSEUR
%token<texte> COULEUR
%token<valeur_entiere> OPACITE
%token<valeur_entiere> ROTATION
%token<texte> REMPLISSAGE
%token<texte> IDENTIFICATEUR
%token VIRGULE
%token DEGRE
%token POURCENT
%token PARENTHESE_OUVRANTE
%token PARENTHESE_FERMANTE
%token ACCOLADE_OUVRANTE
%token ACCOLADE_FERMANTE
%token CROCHET_OUVRANT
%token CROCHET_FERMANT
%token EGAL
%token FENETRE
%token<valeur_entiere> LONGUEUR
%token<valeur_entiere> HAUTEUR
%token FIN_LIGNE

%type<texte> Forme

%start Input
%%
Input: 
	FIN_LIGNE
	|FIN_LIGNE Input
	|syntaxe_monoligne Input
	|syntaxe_multiligne Input
	|syntaxe_identifiant Input
	|syntaxe_fenetre Input

syntaxe_monoligne: 
	Forme PARENTHESE_OUVRANTE ENTIER VIRGULE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARENTHESE_FERMANTE ACCOLADE_OUVRANTE COLOR VIRGULE ENTIER VIRGULE FILLING VIRGULE ENTIER DEGRE VIRGULE ENTIER POURCENT ACCOLADE_FERMANTE
	{
		Rectangle *r = new Rectangle($3,$5,$7,$9);
		std::cout << "Filling = " << $16 << std::endl;
		if (strcmp($16,"plein") == 0)
		{
			std::cout << "On remplit = " << $16 << std::endl;
			r->set_filling(PLEIN);
		}
		D->m_formes.push_back(r);
	}

syntaxe_multiligne: 
	Forme PARENTHESE_OUVRANTE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARENTHESE_FERMANTE ACCOLADE_OUVRANTE FIN_LIGNE
	{
		Cercle *c = new Cercle($3,$5,$7);
		D->m_formes.push_back(c);
	}
	Option_multiligne
	Option_multiligne
	Option_multiligne
	Option_multiligne
	Option_multiligne
	ACCOLADE_FERMANTE

Option_multiligne:
	COULEUR EGAL COLOR FIN_LIGNE
	{
		// On récupère la forme courante pour appliquer les options
		Forme *f = D->currentShape();
		f->set_color($3);
	}
	|ROTATION EGAL ENTIER DEGRE FIN_LIGNE
	{
		// On récupère la forme courante pour appliquer les options
		Forme *f = D->currentShape();
		f->set_rotation($3);
	}
	|REMPLISSAGE EGAL FILLING FIN_LIGNE
	{	
		// On récupère la forme courante pour appliquer les options
		Forme *f = D->currentShape();
		if (strcmp($3,"plein") == 0)
		{
			std::cout << "On remplit = " << $3 << std::endl;
			f->set_filling(PLEIN);
		}
	}
	|EPAISSEUR EGAL ENTIER FIN_LIGNE
	{
		// On récupère la forme courante pour appliquer les options
		Forme *f = D->currentShape();
		f->set_thickness($3);
	}
	|OPACITE EGAL ENTIER POURCENT FIN_LIGNE
	{
		// On récupère la forme courante pour appliquer les options
		Forme *f = D->currentShape();
		f->set_opacity($3);
	}

syntaxe_identifiant: 
	Forme IDENTIFICATEUR PARENTHESE_OUVRANTE ENTIER VIRGULE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARENTHESE_FERMANTE FIN_LIGNE
	IDENTIFICATEUR CROCHET_OUVRANT EPAISSEUR CROCHET_FERMANT EGAL ENTIER FIN_LIGNE
	IDENTIFICATEUR CROCHET_OUVRANT COULEUR CROCHET_FERMANT EGAL COLOR		
	{
		Ligne *l = new Ligne($4,$6,$8,$10);
		D->m_formes.push_back(l);
	}

syntaxe_fenetre:
	FENETRE CROCHET_OUVRANT LONGUEUR CROCHET_FERMANT EGAL ENTIER
	{
		D->m_longueur = $3;
		std::cout << "Longueur = " << D->m_longueur << " $3 = " << $3 << std::endl;
	}
	|FENETRE CROCHET_OUVRANT HAUTEUR CROCHET_FERMANT EGAL ENTIER
	{
		D->m_hauteur = $3;
		std::cout << "Hauteur = " << D->m_hauteur << " $3 = " << $3 << std::endl;
	}
	|FENETRE CROCHET_OUVRANT COULEUR CROCHET_FERMANT EGAL COLOR

Forme:
	RECTANGLE
	|CERCLE
	|LIGNE


%%


void trace(QMainWindow * w){
	yyin = fopen("forme.txt", "r");
	D = new monDessin;	
	w->setCentralWidget(D);
    	w->setMinimumSize(800, 600);
    // On remplit les attributs au cas où ils ne sont pas fournis dans le fichier texte
    D->m_hauteur = 800;
    D->m_longueur = 600;
	yyparse();
	w->resize(D->m_hauteur, D->m_longueur);
	D->draw();
	w->show();
	return	;
}



void yyerror(const std::string& mess){
    std::cout << mess << std::endl;
}