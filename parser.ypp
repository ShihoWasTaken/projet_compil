%{

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include "monDessin.h"
#include <QtGui>
#include <QApplication>
#include <algorithm>

#include "rectangle.h"
#include "cercle.h"
#include "ligne.h"


#define YYERROR_VERBOSE
#define USE(VALUE) /*empty*/


extern "C" int yyparse (void);
extern "C" int yylex(void);
extern "C" void yyerror(const std::string&);
extern FILE* yyin;

QPointer<monDessin> D;
%}

%union{
    char * texte;
    int valeur_entiere;
}

%token VIRGULE
%token DEGRE
%token POURCENT
%token PARENTHESE_OUVRANTE
%token PARENTHESE_FERMANTE
%token ACCOLADE_OUVRANTE
%token ACCOLADE_FERMANTE
%token CROCHET_OUVRANT
%token CROCHET_FERMANT
%token EGAL
%token FENETRE
%token FIN_LIGNE
%token HASHTAG
%token COMMENTAIRE_MONO
%token COMMENTAIRE_MULTI
%token IMAGE
%token<texte> PATH
%token<texte> DOT
%token<texte> EXT_IMG
%token<texte> BOUCLER
%token<texte> CERCLE
%token<texte> RECTANGLE
%token<texte> LIGNE
%token<texte> COULEUR
%token<texte> COLORNAME
%token<texte> RGBCOLOR
%token<texte> FILLING
%token<texte> NOM_COULEUR
%token<texte> REMPLISSAGE
%token<texte> IDENTIFICATEUR
%token<valeur_entiere> EPAISSEUR
%token<valeur_entiere> ENTIER
%token<valeur_entiere> OPACITE
%token<valeur_entiere> ROTATION
%token<valeur_entiere> LONGUEUR
%token<valeur_entiere> HAUTEUR

%type<texte> Color
%type<texte> Forme
%type<valeur_entiere> Instanciation_boucle

%start Input
%%
Input: 

	{
		std::cout << "Fin du fichier atteinte - Arrêt du parsing" << std::endl;
	}
	|FIN_LIGNE Input
	|COMMENTAIRE_MONO Input
	|COMMENTAIRE_MULTI Input
	|syntaxe_monoligne Input
	|syntaxe_multiligne Input
	|syntaxe_identifiant Input
	|option_identifiant Input
	|syntaxe_fenetre Input
	|syntaxe_image Input
	|syntaxe_boucle Input

syntaxe_monoligne: 
	Instanciation ACCOLADE_OUVRANTE Color VIRGULE ENTIER VIRGULE FILLING VIRGULE ENTIER DEGRE VIRGULE ENTIER POURCENT ACCOLADE_FERMANTE
	{
		// On récupère la forme courante pour appliquer les options
		Forme *f = D->currentShape();
		f->set_color($3);
		f->set_thickness($5);
		if (strcmp($7,"plein") == 0)
		{
			f->set_filling(PLEIN);
		}
		f->set_rotation($9);
		f->set_opacity($12);
	}

syntaxe_multiligne: 
	Instanciation ACCOLADE_OUVRANTE FIN_LIGNE
	Option_multiligne
	Option_multiligne
	Option_multiligne
	Option_multiligne
	Option_multiligne
	ACCOLADE_FERMANTE

Option_multiligne:
	COULEUR EGAL Color FIN_LIGNE
	{
		// On récupère la forme courante pour appliquer les options
		Forme *f = D->currentShape();
		f->set_color($3);
	}
	|ROTATION EGAL ENTIER DEGRE FIN_LIGNE
	{
		// On récupère la forme courante pour appliquer les options
		Forme *f = D->currentShape();
		f->set_rotation($3);
	}
	|REMPLISSAGE EGAL FILLING FIN_LIGNE
	{	
		// On récupère la forme courante pour appliquer les options
		Forme *f = D->currentShape();
		if (strcmp($3,"plein") == 0)
		{
			f->set_filling(PLEIN);
		}
	}
	|EPAISSEUR EGAL ENTIER FIN_LIGNE
	{
		// On récupère la forme courante pour appliquer les options
		Forme *f = D->currentShape();
		f->set_thickness($3);
	}
	|OPACITE EGAL ENTIER POURCENT FIN_LIGNE
	{
		// On récupère la forme courante pour appliquer les options
		Forme *f = D->currentShape();
		f->set_opacity($3);
	}

syntaxe_identifiant: 
	Instanciation_identifiant FIN_LIGNE

option_identifiant:
	IDENTIFICATEUR CROCHET_OUVRANT EPAISSEUR CROCHET_FERMANT EGAL ENTIER
	{
		// On récupère le nom de la variable dans une string
		std::string nom_variable = $1;

		// On cherche si la variable est associée à une forme et on retourne son index
  		D->map_iterator = D->variables.find(nom_variable);

  		// Si l'index existe alors on applique les changements
  		if (D->map_iterator != D->variables.end())
  		{
			// On récupère la forme courante pour appliquer les options
			Forme *f = D->shapeAt(D->map_iterator->second);
			f->set_thickness($6);
  		}
  		// Sinon on affiche une erreur
    	else
    	{
    		std::cout << "Erreur: la variable " << nom_variable << " n'a pas été définie" << std::endl;
    	}	
	}
	|IDENTIFICATEUR CROCHET_OUVRANT COULEUR CROCHET_FERMANT EGAL Color
	{
		// On récupère le nom de la variable dans une string
		std::string nom_variable = $1;

		// On cherche si la variable est associée à une forme et on retourne son index
  		D->map_iterator = D->variables.find(nom_variable);

  		// Si l'index existe alors on applique les changements
  		if (D->map_iterator != D->variables.end())
  		{
			// On récupère la forme courante pour appliquer les options
			Forme *f = D->shapeAt(D->map_iterator->second);
			f->set_color($6);
  		}
  		// Sinon on affiche une erreur
    	else
    	{
    		std::cout << "Erreur: la variable " << nom_variable << " n'a pas été définie" << std::endl;
    	}	
    }
	|IDENTIFICATEUR CROCHET_OUVRANT ROTATION CROCHET_FERMANT EGAL ENTIER DEGRE
	{
		// On récupère le nom de la variable dans une string
		std::string nom_variable = $1;

		// On cherche si la variable est associée à une forme et on retourne son index
  		D->map_iterator = D->variables.find(nom_variable);

  		// Si l'index existe alors on applique les changements
  		if (D->map_iterator != D->variables.end())
  		{
			// On récupère la forme courante pour appliquer les options
			Forme *f = D->shapeAt(D->map_iterator->second);
			f->set_rotation($6);
  		}
  		// Sinon on affiche une erreur
    	else
    	{
    		std::cout << "Erreur: la variable " << nom_variable << " n'a pas été définie" << std::endl;
    	}
	}
	|IDENTIFICATEUR CROCHET_OUVRANT REMPLISSAGE CROCHET_FERMANT EGAL FILLING
	{	
		// On récupère le nom de la variable dans une string
		std::string nom_variable = $1;

		// On cherche si la variable est associée à une forme et on retourne son index
  		D->map_iterator = D->variables.find(nom_variable);

  		// Si l'index existe alors on applique les changements
  		if (D->map_iterator != D->variables.end())
  		{
			// On récupère la forme courante pour appliquer les options
			Forme *f = D->shapeAt(D->map_iterator->second);
				if (strcmp($6,"plein") == 0)
				{
					f->set_filling(PLEIN);
				}
  		}
  		// Sinon on affiche une erreur
    	else
    	{
    		std::cout << "Erreur: la variable " << nom_variable << " n'a pas été définie" << std::endl;
    	}
   	}
	|IDENTIFICATEUR CROCHET_OUVRANT OPACITE CROCHET_FERMANT EGAL ENTIER POURCENT
	{
		// On récupère le nom de la variable dans une string
		std::string nom_variable = $1;

		// On cherche si la variable est associée à une forme et on retourne son index
  		D->map_iterator = D->variables.find(nom_variable);

  		// Si l'index existe alors on applique les changements
  		if (D->map_iterator != D->variables.end())
  		{
			// On récupère la forme courante pour appliquer les options
			Forme *f = D->shapeAt(D->map_iterator->second);
			f->set_opacity($6);
  		}
  		// Sinon on affiche une erreur
    	else
    	{
    		std::cout << "Erreur: la variable " << nom_variable << " n'a pas été définie" << std::endl;
    	}
	}
	|IDENTIFICATEUR CROCHET_OUVRANT EPAISSEUR CROCHET_FERMANT EGAL IDENTIFICATEUR CROCHET_OUVRANT EPAISSEUR CROCHET_FERMANT
	{
		// On récupère le nom des la variable dans des string
		std::string nom_variable_gauche = $1;
		std::string nom_variable_droite = $6;

		// On cherche si la variable gauche est associée à une forme et on retourne son index
  		D->map_iterator = D->variables.find(nom_variable_droite);

  		// Si l'index existe alors on applique les changements
  		if (D->map_iterator != D->variables.end())
  		{
			// On récupère de la variable gauche pour obtenir sa propriété
			Forme *f = D->shapeAt(D->map_iterator->second);
			int epaisseur = f->get_thickness();

			// On cherche si la variable droite est associée à une forme et on retourne son index
  			D->map_iterator = D->variables.find(nom_variable_gauche);

	  		// Si l'index existe alors on applique les changements
	  		if (D->map_iterator != D->variables.end())
	  		{
				// On récupère la forme courante pour appliquer les options
				f = D->shapeAt(D->map_iterator->second);
				f->set_thickness(epaisseur);
	  		}
	  		// Sinon on affiche une erreur
	    	else
	    	{
	    		std::cout << "Erreur: la variable " << nom_variable_gauche << " n'a pas été définie" << std::endl;
	    	}
  		}
  		// Sinon on affiche une erreur
    	else
    	{
    		std::cout << "Erreur: la variable " << nom_variable_droite << " n'a pas été définie" << std::endl;
    	}
	}
	|IDENTIFICATEUR CROCHET_OUVRANT COULEUR CROCHET_FERMANT EGAL IDENTIFICATEUR CROCHET_OUVRANT COULEUR CROCHET_FERMANT
	{
		// On récupère le nom des la variable dans des string
		std::string nom_variable_gauche = $1;
		std::string nom_variable_droite = $6;

		// On cherche si la variable gauche est associée à une forme et on retourne son index
  		D->map_iterator = D->variables.find(nom_variable_droite);

  		// Si l'index existe alors on applique les changements
  		if (D->map_iterator != D->variables.end())
  		{
			// On récupère de la variable gauche pour obtenir sa propriété
			Forme *f = D->shapeAt(D->map_iterator->second);
			QColor color = f->get_color();

			// On cherche si la variable droite est associée à une forme et on retourne son index
  			D->map_iterator = D->variables.find(nom_variable_gauche);

	  		// Si l'index existe alors on applique les changements
	  		if (D->map_iterator != D->variables.end())
	  		{
				// On récupère la forme courante pour appliquer les options
				f = D->shapeAt(D->map_iterator->second);
				f->set_color(color);
	  		}
	  		// Sinon on affiche une erreur
	    	else
	    	{
	    		std::cout << "Erreur: la variable " << nom_variable_gauche << " n'a pas été définie" << std::endl;
	    	}
  		}
  		// Sinon on affiche une erreur
    	else
    	{
    		std::cout << "Erreur: la variable " << nom_variable_droite << " n'a pas été définie" << std::endl;
    	}
	}
	|IDENTIFICATEUR CROCHET_OUVRANT ROTATION CROCHET_FERMANT EGAL IDENTIFICATEUR CROCHET_OUVRANT ROTATION CROCHET_FERMANT
	{
		// On récupère le nom des la variable dans des string
		std::string nom_variable_gauche = $1;
		std::string nom_variable_droite = $6;

		// On cherche si la variable gauche est associée à une forme et on retourne son index
  		D->map_iterator = D->variables.find(nom_variable_droite);

  		// Si l'index existe alors on applique les changements
  		if (D->map_iterator != D->variables.end())
  		{
			// On récupère de la variable gauche pour obtenir sa propriété
			Forme *f = D->shapeAt(D->map_iterator->second);
			int rotation = f->get_rotation();

			// On cherche si la variable droite est associée à une forme et on retourne son index
  			D->map_iterator = D->variables.find(nom_variable_gauche);

	  		// Si l'index existe alors on applique les changements
	  		if (D->map_iterator != D->variables.end())
	  		{
				// On récupère la forme courante pour appliquer les options
				f = D->shapeAt(D->map_iterator->second);
				f->set_rotation(rotation);
	  		}
	  		// Sinon on affiche une erreur
	    	else
	    	{
	    		std::cout << "Erreur: la variable " << nom_variable_gauche << " n'a pas été définie" << std::endl;
	    	}
  		}
  		// Sinon on affiche une erreur
    	else
    	{
    		std::cout << "Erreur: la variable " << nom_variable_droite << " n'a pas été définie" << std::endl;
    	}
	}
	|IDENTIFICATEUR CROCHET_OUVRANT REMPLISSAGE CROCHET_FERMANT EGAL IDENTIFICATEUR CROCHET_OUVRANT REMPLISSAGE CROCHET_FERMANT
	{
		// On récupère le nom des la variable dans des string
		std::string nom_variable_gauche = $1;
		std::string nom_variable_droite = $6;

		// On cherche si la variable gauche est associée à une forme et on retourne son index
  		D->map_iterator = D->variables.find(nom_variable_droite);

  		// Si l'index existe alors on applique les changements
  		if (D->map_iterator != D->variables.end())
  		{
			// On récupère de la variable gauche pour obtenir sa propriété
			Forme *f = D->shapeAt(D->map_iterator->second);
			Filling remplissage = f->get_filling();

			// On cherche si la variable droite est associée à une forme et on retourne son index
  			D->map_iterator = D->variables.find(nom_variable_gauche);

	  		// Si l'index existe alors on applique les changements
	  		if (D->map_iterator != D->variables.end())
	  		{
				// On récupère la forme courante pour appliquer les options
				f = D->shapeAt(D->map_iterator->second);
				f->set_filling(remplissage);
	  		}
	  		// Sinon on affiche une erreur
	    	else
	    	{
	    		std::cout << "Erreur: la variable " << nom_variable_gauche << " n'a pas été définie" << std::endl;
	    	}
  		}
  		// Sinon on affiche une erreur
    	else
    	{
    		std::cout << "Erreur: la variable " << nom_variable_droite << " n'a pas été définie" << std::endl;
    	}
	}
	|IDENTIFICATEUR CROCHET_OUVRANT OPACITE CROCHET_FERMANT EGAL IDENTIFICATEUR CROCHET_OUVRANT OPACITE CROCHET_FERMANT
	{
		// On récupère le nom des la variable dans des string
		std::string nom_variable_gauche = $1;
		std::string nom_variable_droite = $6;

		// On cherche si la variable gauche est associée à une forme et on retourne son index
  		D->map_iterator = D->variables.find(nom_variable_droite);

  		// Si l'index existe alors on applique les changements
  		if (D->map_iterator != D->variables.end())
  		{
			// On récupère de la variable gauche pour obtenir sa propriété
			Forme *f = D->shapeAt(D->map_iterator->second);
			int opacite = f->get_opacity();

			// On cherche si la variable droite est associée à une forme et on retourne son index
  			D->map_iterator = D->variables.find(nom_variable_gauche);

	  		// Si l'index existe alors on applique les changements
	  		if (D->map_iterator != D->variables.end())
	  		{
				// On récupère la forme courante pour appliquer les options
				f = D->shapeAt(D->map_iterator->second);
				f->set_opacity(opacite);
	  		}
	  		// Sinon on affiche une erreur
	    	else
	    	{
	    		std::cout << "Erreur: la variable " << nom_variable_gauche << " n'a pas été définie" << std::endl;
	    	}
  		}
  		// Sinon on affiche une erreur
    	else
    	{
    		std::cout << "Erreur: la variable " << nom_variable_droite << " n'a pas été définie" << std::endl;
    	}
	}


syntaxe_fenetre:
	FENETRE CROCHET_OUVRANT LONGUEUR CROCHET_FERMANT EGAL ENTIER
	{
		D->m_longueur = $6;
	}
	|FENETRE CROCHET_OUVRANT HAUTEUR CROCHET_FERMANT EGAL ENTIER
	{
		D->m_hauteur = $6;
	}
	|FENETRE CROCHET_OUVRANT COULEUR CROCHET_FERMANT EGAL Color
	{
		D->set_color($6);
	}

syntaxe_image:
	IMAGE PARENTHESE_OUVRANTE ENTIER VIRGULE ENTIER VIRGULE PATH PARENTHESE_FERMANTE
	{
		Image *i = new Image($3,$5,$7);
		D->m_formes.push_back(i);
	}

syntaxe_boucle:
	BOUCLER ACCOLADE_OUVRANTE FIN_LIGNE
	ligne_boucle
	ACCOLADE_FERMANTE

Forme:
	RECTANGLE
	|LIGNE

Color:
	COLORNAME
	|HASHTAG ENTIER VIRGULE ENTIER VIRGULE ENTIER
	{
		std::string str = "#";
		std::string str2 = std::to_string($2);

		str += str2;
		str += ",";

		std::string str3 = std::to_string($4);
		str += str3;
		str += ",";

		std::string str4 = std::to_string($6);
		str += str4;

		// On retourne la chaine formatée Example: #255,255,255
		$$ = (char *) str.c_str();
	}

Instanciation:
	CERCLE PARENTHESE_OUVRANTE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARENTHESE_FERMANTE
	{
		Cercle *c = new Cercle($3,$5,$7);
		D->m_formes.push_back(c);
	}
	|Forme PARENTHESE_OUVRANTE ENTIER VIRGULE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARENTHESE_FERMANTE
	{
		std::string nomForme($1);
		std::transform(nomForme.begin(), nomForme.end(), nomForme.begin(), ::tolower);

		if(nomForme == "rectangle")
		{
			Rectangle *r = new Rectangle($3,$5,$7,$9);
			D->m_formes.push_back(r);	
		}
		else if(nomForme == "ligne")
		{
			Ligne *l = new Ligne($3,$5,$7,$9);
			D->m_formes.push_back(l);
		}
	}

Instanciation_identifiant:
	CERCLE IDENTIFICATEUR PARENTHESE_OUVRANTE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARENTHESE_FERMANTE
	{
		Cercle *c = new Cercle($4,$6,$8);
		D->m_formes.push_back(c);
		D->variables[$2] = D->currentIndex();
	}
	|Forme IDENTIFICATEUR PARENTHESE_OUVRANTE ENTIER VIRGULE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARENTHESE_FERMANTE
	{
		std::string nomForme($1);
		std::transform(nomForme.begin(), nomForme.end(), nomForme.begin(), ::tolower);

		if(nomForme == "rectangle")
		{
			Rectangle *r = new Rectangle($4,$6,$8,$10);
			D->m_formes.push_back(r);	
		}
		else if(nomForme == "ligne")
		{
			Ligne *l = new Ligne($4,$6,$8,$10);
			D->m_formes.push_back(l);
		}
		D->variables[$2] = D->currentIndex();
	}

Instanciation_boucle:
	CERCLE PARENTHESE_OUVRANTE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARENTHESE_FERMANTE PARENTHESE_OUVRANTE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARENTHESE_FERMANTE
	{
		for(int i = 0; i < $10; i++)
		{
			Cercle *c = new Cercle(($3 + (i*$12)),($5 + (i*$14)),$7);
			D->m_formes.push_back(c);
		}
		// On retourne le nombre d'itérations pour pouvoir traiter les options
		$$ = $10;
	}
	|Forme PARENTHESE_OUVRANTE ENTIER VIRGULE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARENTHESE_FERMANTE PARENTHESE_OUVRANTE ENTIER VIRGULE ENTIER VIRGULE ENTIER PARENTHESE_FERMANTE
	{
		for(int i = 0; i < $12; i++)
		{
			std::string nomForme($1);
			std::transform(nomForme.begin(), nomForme.end(), nomForme.begin(), ::tolower);

			if(nomForme == "rectangle")
			{
				Rectangle *r = new Rectangle(($3 + (i*$14)),($5 + (i*$16)),$7,$9);
				D->m_formes.push_back(r);	
			}
			else if(nomForme == "ligne")
			{
				Ligne *l = new Ligne(($3 + (i*$14)),($5 + (i*$16)),($7 + (i*$14)),($9 + (i*$16)));
				D->m_formes.push_back(l);
			}
		}
		// On retourne le nombre d'itérations pour pouvoir traiter les options
		$$ = $12;
	}	

ligne_boucle:
	
	|Instanciation_boucle ACCOLADE_OUVRANTE Color VIRGULE ENTIER VIRGULE FILLING VIRGULE ENTIER DEGRE VIRGULE ENTIER POURCENT ACCOLADE_FERMANTE FIN_LIGNE
	{
		Forme *f;
		for(int i = 0; i < $1; i++)
		{
			// On récupère la forme courante pour appliquer les options
			f = D->currentShape(i);
			f->set_color($3);
			f->set_thickness($5);
			if (strcmp($7,"plein") == 0)
			{
				f->set_filling(PLEIN);
			}
			f->set_rotation($9);
			f->set_opacity($12);	
		}
	}
	ligne_boucle

%%


void trace(QMainWindow * w, int argc , char ** argv ){
	// Si on passe un argument au programme
	if(argc > 1)
	{
		// On essaye d'ouvrir le fichier qui a pour chemin et argument
		yyin = fopen(argv[1], "r");
		// Si on échoue, on quitte le programme avec un message d'erreur
		if(yyin == nullptr)
		{
			std::cout << "Erreur - Le fichier passé en argument du programme est invalide" << std::endl;
			exit(EXIT_FAILURE);
		}
	}
	// Sinon on lit le fichier par défaut
	{
		yyin = fopen("forme.txt", "r");
		// Si on échoue, on quitte le programme avec un message d'erreur
		if(yyin == nullptr)
		{
			std::cout << "Impossible de trouver le fichier à parser par défaut(forme.txt)" << std::endl;
			exit(EXIT_FAILURE);
		}
	}

	D = new monDessin;	
	w->setCentralWidget(D);
    w->setMinimumSize(800, 600);

    // On remplit les attributs au cas où ils ne sont pas fournis dans le fichier texte
    D->m_longueur = 800;
    D->m_hauteur = 600;

    // On commence à parser
	yyparse();

	// On met à jour la fenêtre et on affiche les formes une fois le parsing terminé
	QPalette Pal(QApplication::palette());
	Pal.setColor(QPalette::Background, D->color);		
	w->setAutoFillBackground(true);
	w->setPalette(Pal);

	// On redimensionne la fenêtre
	w->resize(D->m_longueur, D->m_hauteur);
	D->draw();
	w->show();
	return	;
}





void yyerror(const std::string& mess){
    std::cout << mess << std::endl;
}